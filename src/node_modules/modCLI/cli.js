/**
 * CLI for Kili.us server
 * Author: Jeff Horak
 * Date: 7/29/12
 */

var Promise  = require('modPromise').Promise,
    db       = require('modDatabase'),
    readLine = require('readline'),
    http     = require('http'),
    server,
    rl,
    blue  = '\u001b[34m',
    cyan = '\u001b[36m',
    reset = '\u001b[0m',
    // These are the available commands and their aliases
    cmds = {
      shutdown: /^(shutdown|quit|exit)$/i,
      help: /^(h(elp)?|\?)$/i,
      about: /^(-?v(ersion)?|about)$/i,
      viewLog: /^l(og)?$/i,
      errorLog: /^e(rror)?s?$/i
    };

/**
 * Display help
 */
function displayHelp() {
  console.log(cyan + "Kili.us Server Commands" + reset);
  console.log(blue + '  about   ' + reset + " : Information about this process");
  console.log(blue + '  error   ' + reset + " : View the contents of the error log");
  console.log(blue + '  help    ' + reset + " : Listing of Kili.us server CLI commands");
  console.log(blue + '  log     ' + reset + " : View the contents of the activity log");
  console.log(blue + '  shutdown' + reset + " : Close database connections and exit");
}

/**
 * Display information about the server
 */
function displayAbout() {
  var uptime = Math.floor(process.uptime()),
      seconds = uptime % 60,
      minutes = Math.floor(uptime / 60) % 60,
      hours = Math.floor(uptime / (60*60)) % 24,
      days = Math.floor(uptime / (60*60*24));

  console.log('Kili.us Server');
  console.log(blue + '  Version' + reset + ' : 0.0.1');
  console.log(blue + '  Author ' + reset + ' : Jeff Horak ' + cyan + '@jmhorak' + reset);
  console.log(blue + '  Source ' + reset + ' : https://github.com/jmhorak/Kilius');
  console.log(blue + '  Uptime ' + reset + ' : ' +
      (days > 0 ? days + ' day' + (days !== 1 ? 's ' : ' ') : '') +
      (hours > 0 ? hours + ' hour' + (hours !== 1 ? 's ' : ' ') : '') +
      (minutes > 0 ? minutes + ' minute' + (minutes !== 1 ? 's ' : ' ') : '') +
      seconds + ' second' + (seconds !== 1 ? 's' : '')
  );
}

/**
 * Format and display an array of log data
 * @param data - Array of data
 */
function displayLog(data) {
  var i = 0,
      j = 0,
      prop,
      len = data.length,
      objTmp,
      rProps = /^(_id|date)$/i,
      props = [],
      propsLen = 0,
      maxPropNameLen = 0;

  for (; i < len; i++) {
    objTmp = data[i];
    console.log('\n' + cyan + objTmp.date + '------------------------' + reset);

    // Loop through all the properties on this object
    for (prop in objTmp) {
      if (objTmp.hasOwnProperty(prop) && !rProps.test(prop)) {
        props.push(prop);

        if (prop.length > maxPropNameLen) {
          maxPropNameLen = prop.length;
        }
      }
    }

    // Display the data in sorted order
    props.sort();

    for (j = 0, propsLen = props.length; j < propsLen; j++) {

      // Nicely format the data. The keys will appear in one column and the text in the other
      prop = props[j];
      console.log(blue + '  ' + prop + (new Array(maxPropNameLen - prop.length + 1).join(' ')) + reset +
          ' : ' + (typeof objTmp[prop] === 'object' ? JSON.stringify(objTmp[prop]) : objTmp[prop]));
    }

    props = [];
  }

}

/**
 * Query the database for log information
 * @param logSize - Total size of the log
 * @param promise - Promise
 * @param queryFn - Function to query used to query the database
 */
function queryDatabase(logSize, promise, queryFn) {
  var pageSize = 10,
      pageNumber = 0;

  // Performs the query
  function doQuery(pageNumber) {
    queryFn(pageNumber, pageSize).then(

        // Results of the query
        function(results) {
          displayLog(results);

          // If there is additional data, prompt
          if ((pageNumber*pageSize + pageSize) < logSize) {

            // There is more data, ask if we should load it
            rl.question("More? [Y]", function(answer) {
              if (answer === '' || answer.toUpperCase() === 'Y') {
                doQuery(pageNumber+1);
              } else {
                promise.resolve();
              }
            });

          } else {
            // No more data, return to prompt
            promise.resolve();
          }
        },

        // Could not fetch the data
        function(err) {
          console.log(JSON.stringify(err));
          promise.reject();
        }
    );
  }

  // Perform a query on the first page
  doQuery(0);
}

/**
 * Grab the log data from the database
 * @return {*} - Promise
 */
function fetchLog() {
  var promise = new Promise();

  // Get the total size of the activity log
  db.logSize().then(

      // Perform the actual query
      function(count) {
        queryDatabase(count, promise, function(pageNumber, pageSize) {
          return db.fetchLog(pageNumber, pageSize);
        });
      },

      // Error fetching the size
      function(err) {
        console.log(JSON.stringify(err));
        promise.reject();
      }
  );

  return promise;
}

/**
 * Grab the error log data from the database
 * @return {*} - Promise
 */
function fetchErrorLog() {
  var promise = new Promise();

  // Get the total size of the error log
  db.errorSize().then(

      // Perform the actual query
      function(count) {
        queryDatabase(count, promise, function(pageNumber, pageSize) {
          return db.fetchError(pageNumber, pageSize);
        });
      },

      // Error fetching the size
      function(err) {
        console.log(JSON.stringify(err));
        promise.reject();
      }
  );

  return promise;
}

/**
 * Shutdown the server
 * @return {*} - Promise
 */
function shutdown() {
  var promise = new Promise();
  console.log('Shutting down the server...');

  // First, inform the server to stop accepting new requests
  server.close(function() {

    console.log('...Server closed, no new connections accepted.');
    console.log('Closing connection to database...');

    // Gracefully shutdown the database
    db.close().then(
        function() {
          console.log('...Connection closed');
          promise.resolve();
        },

        function(message) {
          console.log(message);
          promise.reject();
        }
    );
  });

  return promise;
}

/**
 * Create a CLI and start handling requests from the user
 * @param svr - Server handle
 */
exports.createCLI = function(svr) {
  server = svr;

  // Helper function
  function resumePrompting() {
    rl.prompt();
    rl.resume();
  }

  // Create an interface for the command line
  rl = readLine.createInterface(process.stdin, process.stdout);
  rl.setPrompt('Kilius> ');

  rl.prompt();

  rl.on('line', function(line) {
    var cmd = line.trim();
    // Prevent further input until we've handled this
    rl.pause();

    if (cmds.shutdown.test(cmd)) {

      // Handle a shutdown command
      shutdown().then(
          function() {
            rl.close();
            process.exit(0);
          },

          resumePrompting
      );

    } else if (cmds.help.test(cmd)) {
      // Display help
      displayHelp();
      resumePrompting();

    } else if (cmds.about.test(cmd)) {
      // Display information about this server
      displayAbout();
      resumePrompting();

    } else if (cmds.viewLog.test(cmd)) {
      // Get the activity log
      fetchLog().then( resumePrompting, resumePrompting );

    } else if (cmds.errorLog.test(cmd)) {
      // Get the error log
      fetchErrorLog().then( resumePrompting, resumePrompting );

    } else if (cmd === '') {
      // Nothing there, move along
      resumePrompting();

    } else {
      // Unknown command
      console.log('Unknown command');
      resumePrompting();
    }

  });

  rl.on('SIGINT', function() {
    shutdown().then(

        function() {
          rl.close();
          process.exit(0);
        }

    );
  });

};
