/**
 * Shut down the bad guys by adding them to blacklists
 *
 * Author: Jeff Horak
 * Date: 7/16/12
 */

var db = require('modDatabase'),
    Promise = require('modPromise').Promise,
    logging = require('modLogging'),
    blacklist = {};

/**
 * Initializes the blacklist from the database
 * @return {*} - Promise
 */
exports.initBlacklist = function() {
  var promise = new Promise();

  // While unnecessary in production, this harmless line makes testing easier
  blacklist = {};

  db.populateBlacklist().then(

      // Populated the blacklist from the database
      function(list) {
        var i = list.length;

        // Write the blacklisted clients into an object
        while(i--) {
          blacklist[ list[i].clientID ] = true;
        }

        promise.resolve();
      },

      // Error initializing from the database
      function(err) {
        err.message = err.message || 'Error initializing the blacklist';
        err.code = err.code || 500;

        promise.reject(err.message, err.code);
        logging.error(err);
      }
  );

  return promise;
};

/**
 * Determines if the given client is blacklisted
 * @param client - The client to check
 * @return {Boolean} - Is blacklisted
 */
exports.isClientBlacklisted = function(client) {
  // Speed optimization, if client is not blacklisted, add to the list with value false.
  //   The next time this user visits, this check will go faster.
  var val = blacklist[client];
  if (val === undefined) { blacklist[client] = false; }

  return !!val;
};

/**
 * Adds a client to the blacklist
 * @param client - The client to add
 * @return {*} - Promise
 */
exports.addBlacklistedClient = function(client) {
  var promise = new Promise();

  db.addToBlacklist(client).then(

      function() {
        // Add the blacklisted client to our cached list
        blacklist[client] = true;
        promise.resolve();
      },

      // Error adding the error to the database
      function(err) {
        err.message = err.message || 'Error adding the client to the blacklist';
        err.code = err.code || 500;

        promise.reject(err.message, err.code);
        logging.error(err);
      }
  );

  return promise;
};

/**
 * Remove a client from the blacklist
 * @param client - The client to remove
 * @return {*} - Promise
 */
exports.removeBlacklistedClient = function(client) {
  var promise = new Promise();

  db.removeFromBlacklist(client).then(

      function() {
        // Remove the blacklisted client from the cached list
        blacklist[client] = false;
        promise.resolve();
      },

      function(err) {
        err.message = err.message || 'Error removing a client from the blacklist';
        err.code = err.code || 500;

        promise.reject(err.message, err.code);
        logging.error(err);
      }
  );

  return promise;
};