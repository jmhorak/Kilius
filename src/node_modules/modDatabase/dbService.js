/**
 * Database layer for Kili.us server
 *
 * Author: Jeff Horak
 * Date: 5/18/12
 */

var m = require('mongodb'),
    mongo = null;

function throwOnErr(err) { if (err) { console.log('- Found an error'); throw err; } }

function log(collection, payload, callback) {
  collection.insert(payload, { safe: true }, callback);
}

function initializeCollection(name, createOptions, callback) {
  mongo.collection( name, {safe: true}, function(err, result) {
    if (err) {

      // Collection does not exist, create it
      mongo.createCollection( name, createOptions.options, function(err, collection) {
        throwOnErr(err);

        // Created the collection, does it need an initial value set?
        if (createOptions.value) {

          collection.insert( createOptions.value, { safe: true }, function(err)  {
            throwOnErr(err);
            callback(err, mongo);
          });

        } else { // No initial value required
          callback(err, mongo);
        }
      });

    } else { // Collection already created
      callback(err, mongo);
    }
  });
};

exports.initDatabase = function(database, callback) {
  // Connect to the mongo database
  mongo = new m.Db(database, new m.Server('localhost', 27017, {}));

  mongo.open(function(err, result) {
    // If any database initialization method fails, throw
    var mb = 1048576;

    throwOnErr(err);

    // Need to init the collections
    // Create the counter collection and start the links counter at 0
    initializeCollection('counter', {
      options: { safe: true },
      value: {tbl: 'links', c: 0 }
    }, function() {

      // Create the links collection
      initializeCollection('links', {
        options: { safe: true }
      }, function() {

        // Create the err log collection, cap it at 10 MB
        initializeCollection('errLog', {
          options: { safe: true, capped: true, size: mb*10 }
        }, function() {

          // Create the activity log collection, cap it at 50 MB
          initializeCollection('actLog', {
            options: { safe: true, capped: true, size: mb*50 }
          }, callback);
        });
      });
    });
  });
};

exports.close = function() {
  mongo.close();
}

exports.logError = function(payload, callback) {
  // Write the payload to the errLog database
  log(mongo.collection('errLog'), payload, callback);
}

exports.logActivity = function(payload, callback) {
  // Write the payload to the actLog database
  log(mongo.collection('actLog'), payload, callback);
}

exports.addNewLinkHit = function(linkID, hitInfo, callback) {
  var links = mongo.collection('links');

  links.findAndModify({linkID: linkID}, [], { $push: { hits: hitInfo }}, {safe: true, new: true},
      function(err, result) {
        if (err) {
          exports.logError({
            logMessage: 'Failure updating resolved link for ID ' + linkID,
            error: err,
            code: 500,
            failedPayload: hitInfo
          }, function() {
            callback(err, null);
          });

        } else if (result && result.longLink) {
          // The long link was found
          callback(null, result.longLink);
        } else {
          // The long link was not found
          exports.logError({
            logMessage: ['Long link for id ', linkID, ' not found'].join(''),
            code: 404
          },function() {
            callback(null, null); // TODO FIX
          });
        }
      }
  );
}

exports.getNextLinkID = function(callback) {
  var counter = mongo.collection('counter');

  counter.findAndModify({tbl: 'links'}, [], {$inc: {c: 1}}, {safe: true, new: true },
      function(err, result) {

        if (err) {
          exports.logError({
            logMessage: 'Failure incrementing links counter',
            error: err,
            code: 500
          }, function() {
            callback(err, null);
          });

        } else if (result && result.c && typeof result.c === 'number') {

          callback(null, result.c);

        } else {

          exports.logError({
            logMessage: 'Incrementing counter link did not return a number',
            error: result,
            code: 500
          }, function() {
            callback(null, null); // TODO FIX
          })
        }
      }
  );
}

exports.insertLink = function(linkPayload, callback) {
  var links = mongo.collection('links');

  if (!linkPayload.clientID) {
    linkPayload.clientID = 'Unknown';
  }

  if (!linkPayload.linkID) {
    exports.logError({
      logMessage: 'Missing linkID when trying to insert a link',
      code: 500
    }, function() {
      callback(null, null); // TODO FIX
    });
    return;
  }

  if (!linkPayload.longLink) {
    exports.logError({
      logMessage: 'Missing the long link when trying to insert a link',
      code: 500
    }, function() {
      callback(null, null); // TODO FIX
    });
  }

  if (!linkPayload.longLink) {
    exports.logError({
      logMessage: 'Missing the short link when trying to insert a link',
      code: 500
    }, function() {
      callback(null, null); // TODO FIX
    });
  }

  if (!linkPayload.createDate) {
    linkPayload.createDate = new Date;
  }

  if (!linkPayload.hits) {
    linkPayload.hits = [];
  }

  links.insert(linkPayload, { safe: true },
    function(err, result) {

      if (err) {
        exports.logError({
          logMessage: 'Failure inserting into links database',
          error: err,
          code: 500,
          failedPayload: linkPayload
        }, function() {
          callback('Oops. We\'ve encountered a database error and were unable to process your request.', null);
        })
      } else {
        callback(null, true);
      }
    }
  )
}

