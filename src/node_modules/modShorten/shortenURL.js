//////////////////////////////////////////////////////////////////////////
// File: shortenURL.js
//
// Description: 
//   Takes a URL and an IP address and inserts it into the database.
//      A unique string key is produced that allows fetching the URL again later
//////////////////////////////////////////////////////////////////////////
var clients = {},
    transform = require('modTransform'),
    Promise = require('modPromise').Promise,
    logging = require('modLogging'),
    db = require('modDatabase'),
    opt = require('modOptions'),
    regex = /^(https?:\/\/)?((www\d{0,3}[\.])?([a-zA-Z0-9\.\-]+[\.][a-z]{2,6})|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?)(\/|(\/[^\s`!()\[\]{};:'",<>?«»“”‘’]*)*)$/;

/**
 * Throttle a user to only allow shortening x number of links in y time, set x,y in options
 * @param client - The client identifier
 * @return User throttle
 */
function throttleUser(client) {
  var userThrottle = clients[client];

  // Throttle the connected client
  if (userThrottle === undefined) {
    // First time
    userThrottle = 0;

    setTimeout(function() {
      // After the timeout, reset the throttling
      delete clients[client];
    }, opt.throttleTime);

  }

  clients[client] = ++userThrottle;

  return userThrottle;
}

// Helper function for database errors encountered
function handleError(promise, message, code, err) {

  promise.reject(message, code);

  err = err || {};
  err.message = err.message || message;
  err.code = err.code || code;
  logging.error(err);

}

/**
 * Validate the client is valid and below the throttling threshold
 * @param client - The client to check
 * @return Client is validated
 */
exports.validateClient = function(client) {
  var userThrottle = clients[client] || 0;
  // Validate the client is below the throttle limit
  return client && userThrottle < opt.throttleLimit;
};

/**
 * Validates a URL's length and against a regex of accepted URLs
 * @param url - The URL to test
 * @return URL is validated
 */
exports.validateURL = function(url) {
  // Validiate the length of the url and check it against our regex
  return url && url.length && url.length < 2048 && regex.test(url);
};

/**
 * Performs the actual shortening operation
 * @param data - Operational data
 * @return Promise
 */
exports.shortenURL = function(data) {

  var promise = new Promise(),
      url = data.url,
      client = data.client;

  if (!exports.validateURL(url)) {

    // Invalid URL
    handleError(promise, 'Oops. You\'ve entered an invalid URL.', 400, {
      message: 'Failed URL validation',
      client: client,
      url: url
    });

  } else if (!exports.validateClient(client)) {

    if (client) {

      // User over the throttle limit
      handleError(promise, 'Pace yourself. You\'ve reached your daily shortening limit.', 429, {
        message: 'User data throttle limit hit',
        client: client,
        url: url
      });

    } else {

      // Missing client ID
      handleError(promise, 'Validation error', 400, {
        message: 'Failed client validation',
        client: client,
        url: url
      });
    }

  } else {

    // Passed validation, set up throttling
    throttleUser(client);

    db.getNextLinkID().then(

        // Successfully fetched the next ID
        function(nextID) {

          var shortLink = 'http://kili.us/+/' + transform.linkIDToURI(nextID);

          // Insert the new shortened link into the database
          db.insertLink({
            client: client,
            createDate: new Date(),
            hits: [],
            linkID: nextID,
            longLink: url,
            shortLink: shortLink
          }).then(

              function() {
                // Link inserted, promise resolved
                promise.resolve(shortLink, clients[client]);

                logging.log({
                  message: 'Link created',
                  client: client
                });
              },

              // An error occurred inserting the link
              function(err) {
                handleError(promise, 'A database error occurred while shortening the link', 500, err);
              }
          );
        },

        // An error occurred getting the next link ID
        function(err) {
          handleError(promise, 'A database error occurred while shortening the link', 500, err);
        }
    );
  }

  return promise;
};
