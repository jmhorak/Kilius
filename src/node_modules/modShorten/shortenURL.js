//////////////////////////////////////////////////////////////////////////
// File: shortenURL.js
//
// Description: 
//   Takes a URL and an IP address and inserts it into the database.
//      A unique string key is produced that allows fetching the URL again later
//////////////////////////////////////////////////////////////////////////
var clients = {},
    transform = require('../modTransform/transformService.js'),
    Promise = require('../modPromise').Promise,
    db = require('../modDatabase/dbService.js'),
    opt = require('../modOptions'),
    regex = /^(https?:\/\/)?((www\d{0-3}[\.])?([a-zA-Z0-9\.\-]+[\.][a-z]{2,6})|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?)(\/|(\/[^\s`!()\[\]{};:'",<>?«»“”‘’]*)*)$/;

function throttleUser(client) {
  var userThrottle = clients[client];

  // Throttle the connected client
  if (userThrottle === undefined) {
    // First time
    userThrottle = 0;

    setTimeout(function() {
      // After the timeout, reset the throttling
      delete clients[client];
    }, opt.throttleTime);

  }

  clients[client] = ++userThrottle;

  return userThrottle;
}

exports.validateClient = function(client) {
  var userThrottle = clients[client] || 0;
  // Validate the client is below the throttle limit
  return client && userThrottle < opt.throttleLimit;
}

exports.validateURL = function(url) {
  // Validiate the length of the url and check it against our regex
  return url && url.length && url.length < 2048 && regex.test(url);
}

exports.shorten = function(data) {

  var promise = new Promise(),
      url = data.url,
      client = data.client;

  if (!exports.validateURL(url)) {
    // Invalid URL
    promise.reject('Oops. You\'ve entered an invalid URL.', 400);
    db.logError({
      message: 'Failed URL validation',
      client: client,
      url: url
    });

    return promise;
  }

  if (!exports.validateClient(client)) {
    // User over the throttle limit
    if (client) {
      promise.reject('Pace yourself. You\'ve reached your daily shortening limit.', 429);
      db.logError({
        message: 'User data throttle limit hit',
        client: client,
        url: url
      });

    } else {
      // Missing client ID
      promise.reject('Validation error', 400);
      db.logError({
        message: 'Failed client validation',
        client: client,
        url: url
      });
    }

    return promise;
  }

  function databaseError(err) {
    promise.reject('Database error while shortening link', 500);
    db.logError(err);
  }

  // Passed validation, set up throttling
  throttleUser(client);

  db.getNextLinkID().then(function(nextID) {

    // Now shorten the link
    var shortLink = 'http://kili.us/+/' + transform.linkIDToURI(nextID);

    db.insertLink({
      client: client,
      createDate: new Date(),
      hits: [],
      linkID: nextID,
      longLink: url,
      shortLink: shortLink
    })
    .then(function() {

      // Link inserted, promise resolved
      promise.resolve(shortLink, clients[client]);

    }, databaseError);
  }, databaseError);

  return promise;

}

/*var getNextShortenedURL = function(data, cb, errCB) {
  var counter = data.database.collection('counter'),
      links = data.database.collection('links'),
      longLink = data.url,
      throttle = data.throttle,
      client = data.clientID;

  counter.findAndModify({tbl: 'links'}, [], {$inc: {c: 1}}, {safe: true, new: true },
    function(err, result) {
      if (err) {
        errCB({
          statusCode: 500,
          clientMessage: 'Oops. We\'ve encountered a database error and were unable to process your request.',
          logMessage: 'Failure incrementing links counter',
          error: err
        });
      }

      var shortLink = buildShortLink(result.c),
          payload = {
            clientID: client,
            linkID: result.c,
            shortLink: shortLink,
            longLink: longLink,
            createDate: new Date,
            hits: []
          };

      links.insert(payload, { safe: true },
        function(err, result) {
          if (err) {
            errCB({
              statusCode: 500,
              clientMessage: 'Oops. We\'ve encountered a database error and were unable to process your request.',
              logMessage: 'Failure inserting into links database',
              error: err,
              failedPayload: payload
            });
          }

          cb({ url: shortLink, throttle: throttle });
        }
      );
    }
  );
}

var buildShortLink = function(linkID) {
  return 'http://kili.us/+/' + transform.linkIDToURI(linkID);
}

/*exports.shorten = function(data, cb, err) {
   var clientID = data.clientID,
       url = data.url;

  // Validiate the length of the url and check it against our regex
   if (url && url.length < 2048 && regex.test(url)) {

     // Throttle the connected client
     if (clients[clientID] === undefined) {
       // First time
       clients[clientID] = 0;
       setTimeout(function() {
         // After 24 hours, reset the throttling
         delete clients[clientID];
       }, 86400000);

       data.throttle = 0;
       getNextShortenedURL(data, cb, err);

     } else if (clients[clientID] < 25) {
       data.throttle = clients[clientID]++;
       getNextShortenedURL(data, cb, err);
     } else {
       err({
         statusCode: 429, // Too Many Requests
         clientMessage: 'Pace yourself. You\'ve reached your daily shortening limit.',
         logMessage: 'Throttling limit'
       });
     }
   } else {
     err({
       statusCode: 400, // Bad client request
       clientMessage: 'Oops. You\'ve entered an invalid URL.',
       logMessage: 'Failed URL validation',
       failedPayload: url
     });
   }
}*/
