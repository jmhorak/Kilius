//////////////////////////////////////////////////////////////////////////
// File: shortenURL.js
//
// Description: 
//   Takes a URL and an IP address and inserts it into the database.
//      A unique string key is produced that allows fetching the URL again later
//////////////////////////////////////////////////////////////////////////
var clients = {},
    transform = require('../modTransform/transformService.js'),
    Promise = require('../modPromise').Promise,
    db = require('../modDatabase/dbService.js'),
    opt = require('../modOptions'),
    regex = /^(https?:\/\/)?((www\d{0-3}[\.])?([a-zA-Z0-9\.\-]+[\.][a-z]{2,6})|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?)(\/|(\/[^\s`!()\[\]{};:'",<>?«»“”‘’]*)*)$/;

/**
 * Throttle a user to only allow shortening x number of links in y time, set x,y in options
 * @param client - The client identifier
 * @return User throttle
 */
function throttleUser(client) {
  var userThrottle = clients[client];

  // Throttle the connected client
  if (userThrottle === undefined) {
    // First time
    userThrottle = 0;

    setTimeout(function() {
      // After the timeout, reset the throttling
      delete clients[client];
    }, opt.throttleTime);

  }

  clients[client] = ++userThrottle;

  return userThrottle;
}

/**
 * Throws what is passed in
 * @param err - Some error
 */
function throwImmediately(err) {
  throw err;
}

/**
 * Validate the client is valid and below the throttling threshold
 * @param client - The client to check
 * @return Client is validated
 */
exports.validateClient = function(client) {
  var userThrottle = clients[client] || 0;
  // Validate the client is below the throttle limit
  return client && userThrottle < opt.throttleLimit;
}

/**
 * Validates a URL's length and against a regex of accepted URLs
 * @param url - The URL to test
 * @return URL is validated
 */
exports.validateURL = function(url) {
  // Validiate the length of the url and check it against our regex
  return url && url.length && url.length < 2048 && regex.test(url);
}

/**
 * Performs the actual shortening operation
 * @param data - Operational data
 * @return Promise
 */
exports.shorten = function(data) {

  var promise = new Promise(),
      url = data.url,
      client = data.client;

  if (!exports.validateURL(url)) {
    // Invalid URL
    promise.reject('Oops. You\'ve entered an invalid URL.', 400);
    db.logError({
      message: 'Failed URL validation',
      client: client,
      url: url
    }).then(null, throwImmediately);

    return promise;
  }

  if (!exports.validateClient(client)) {
    // User over the throttle limit
    if (client) {
      promise.reject('Pace yourself. You\'ve reached your daily shortening limit.', 429);
      db.logError({
        message: 'User data throttle limit hit',
        client: client,
        url: url
      }).then(null, throwImmediately);

    } else {
      // Missing client ID
      promise.reject('Validation error', 400);
      db.logError({
        message: 'Failed client validation',
        client: client,
        url: url
      }).then(null, throwImmediately);
    }

    return promise;
  }

  // Helper function for database errors encountered
  function databaseError(err) {
    promise.reject('Database error while shortening link', 500);
    db.logError(err).then(null, throwImmediately);
  }

  // Passed validation, set up throttling
  throttleUser(client);

  // Fetch the next link ID from the database
  db.getNextLinkID().then(function(nextID) {

    // Now shorten the link
    var shortLink = 'http://kili.us/+/' + transform.linkIDToURI(nextID),
        // Insert the new shortened link into the database
        insertLinkPromise = db.insertLink({
                              client: client,
                              createDate: new Date(),
                              hits: [],
                              linkID: nextID,
                              longLink: url,
                              shortLink: shortLink
                            });


    insertLinkPromise.then(function() {

      // Link inserted, promise resolved
      promise.resolve(shortLink, clients[client]);

      // Log that a new link was created
      db.logActivity({ message: 'Link created', client: client }).then(null, function(err) {

        // Problem logging the activity, write to the error log
        // Already resolved the client promise though, so just ignore it
        db.logError({
          message: 'Database error writing to the activity log',
          error: err.error,
          code: err.code
        }).then(null, throwImmediately);
      });

    }, databaseError);

  }, databaseError);

  return promise;
}
