//////////////////////////////////////////////////////////////////////////
// File: shortenURL.js
//
// Description: 
//   Takes a URL and an IP address and inserts it into the database.
//      A unique string key is produced that allows fetching the URL again later
//////////////////////////////////////////////////////////////////////////
var clients = {},
    blacklist = {},
    lan = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'b', 'c', 'd', 'f', 'g', 'h', 'j',
           'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'],
    regex = /^(https?:\/\/)?((www\d{0-3}[\.])?([a-zA-Z0-9\.\-]+[\.][a-z]{2,6})|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?)(\/|(\/[^\s`!()\[\]{};:'",<>?«»“”‘’]*)*)$/;

var getNextShortenedURL = function(data, cb) {
  var counter = data.database.collection('counter'),
      links = data.database.collection('links'),
      throwOnErr = function(err) { if (err) { throw err; } };

  counter.findAndModify({tbl: 'links'}, [], {$inc: {c: 1}}, {safe: true, new: true },
    function(err, result) {
      throwOnErr(err);
      var shortLink = buildShortLink(result.c),
          payload = {
            clientID: data.clientID,
            linkID: result.c,
            shortLink: shortLink,
            longLink: data.url,
            createDate: new Date,
            hits: []
          };

      links.insert(payload, { safe: true },
        function(err, result) {
          throwOnErr(err);
          cb(shortLink);
        }
      );
    }
  );
}

var buildShortLink = function(linkID) {
  var cnt = lan.length,
      urlBuild = ['http://kili.us/+/'],
      nextID = linkID,
      addToURL = function(n) { urlBuild.push(lan[Math.floor(n%cnt)]); };

  // Get the next base 'cnt' number
  while (nextID >= cnt) {
    addToURL(nextID);
    nextID /= cnt;
  }

  addToURL(nextID);

  return urlBuild.join('');
}

exports.shorten = function(data, cb, errorCB) {
   var clientID = data.clientID;

  // Validiate the url against our regex
   if (data && data.url && regex.test(data.url)) {

     // Check for black-listed clients
     if (blacklist[clientID] !== undefined) {
       // TODO: Blacklist error
       errorCB(BLACKLIST);
     }

     // Throttle the connected client
     if (clients[clientID] === undefined) {
       // First time
       clients[clientID] = 0;
       setTimeout(function() {
         // After 24 hours, reset the throttling
         delete clients[clientID];
       }, 86400000);

       getNextShortenedURL(data, cb);

     } else if (clients[clientID] < 25) {
       clients[clientID] += 1;
       getNextShortenedURL(data, cb);
     } else {
       // TODO: Throttle limit error
       errorCB(LIMIT);
     }
   } else {
     // TODO: Invalid URL
     errorCB(INVALID);
   }
}