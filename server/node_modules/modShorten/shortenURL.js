//////////////////////////////////////////////////////////////////////////
// File: shortenURL.js
//
// Description: 
//   Takes a URL and an IP address and inserts it into the database.
//      A unique string key is produced that allows fetching the URL again later
//////////////////////////////////////////////////////////////////////////
var clients = {},
    transform = require('../modTransform/transformService.js'),
    regex = /^(https?:\/\/)?((www\d{0-3}[\.])?([a-zA-Z0-9\.\-]+[\.][a-z]{2,6})|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?)(\/|(\/[^\s`!()\[\]{};:'",<>?«»“”‘’]*)*)$/;

var getNextShortenedURL = function(data, cb, errCB) {
  var counter = data.database.collection('counter'),
      links = data.database.collection('links'),
      longLink = data.url,
      throttle = data.throttle,
      client = data.clientID;

  counter.findAndModify({tbl: 'links'}, [], {$inc: {c: 1}}, {safe: true, new: true },
    function(err, result) {
      if (err) {
        errCB({
          code: 3,
          clientMessage: 'Oops. We\'ve encountered a database error and were unable to process your request.',
          logMessage: 'Failure incrementing links counter',
          error: err
        });
      }

      var shortLink = buildShortLink(result.c),
          payload = {
            clientID: client,
            linkID: result.c,
            shortLink: shortLink,
            longLink: longLink,
            createDate: new Date,
            hits: []
          };

      links.insert(payload, { safe: true },
        function(err, result) {
          if (err) {
            errCB({
              code: 3,
              clientMessage: 'Oops. We\'ve encountered a database error and were unable to process your request.',
              logMessage: 'Failure inserting into links database',
              error: err,
              failedPayload: payload
            });
          }

          cb({ url: shortLink, throttle: throttle });
        }
      );
    }
  );
}

var buildShortLink = function(linkID) {
  return 'http://kili.us/+/' + transform.linkIDToURL(linkID);
}

exports.shorten = function(data, cb, err) {
   var clientID = data.clientID,
       url = data.url;

  // Validiate the length of the url and check it against our regex
   if (url && url.length < 2048 && regex.test(url)) {

     // Throttle the connected client
     if (clients[clientID] === undefined) {
       // First time
       clients[clientID] = 0;
       setTimeout(function() {
         // After 24 hours, reset the throttling
         delete clients[clientID];
       }, 86400000);

       data.throttle = 0;
       getNextShortenedURL(data, cb, err);

     } else if (clients[clientID] < 25) {
       data.throttle = clients[clientID]++;
       getNextShortenedURL(data, cb, err);
     } else {
       err({
         code: 2,
         clientMessage: 'Pace yourself. You\'ve reached your daily shortening limit.',
         logMessage: 'Throttling limit'
       });
     }
   } else {
     err({
       code: 1,
       clientMessage: 'Oops. You\'ve entered an invalid URL.',
       logMessage: 'Failed URL validation',
       failedPayload: url
     });
   }
}